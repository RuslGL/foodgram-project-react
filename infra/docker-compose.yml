version: '3.3'
services:
  db:
    image: postgres:13.0-alpine
    volumes:
      - /var/lib/postgresql/data/
    env_file:
      - ./.env
  django:
    build: ..
    # build: ../backend    
    restart: always
    volumes:
      # Контейнер web будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /app/static/
      - static_value:/app/static/
      # Данные, хранящиеся в томе media_value, будут доступны в контейнере web 
      # через директорию /app/media/
      - media_value:/app/media/recipes/
    # «зависит от», 
    depends_on:
      - db
    env_file:
      - ./.env

  nginx:
    # образ, из которого должен быть запущен контейнер
    image: nginx:1.19.3

    # запросы с внешнего порта 80 перенаправляем на внутренний порт 80
    ports:
      - "80:80"

    volumes:
      # При сборке скопировать созданный конфиг nginx из исходной директории 
      # в контейнер и сохранить его в директорию /etc/nginx/conf.d/
      #- ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

      # Контейнер nginx будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /var/html/static/
      - static_value:/var/html/static/

      # Данные, хранящиеся в томе media_value, будут доступны в контейнере nginx
      # через директорию /var/html/media/
      - media_value:/var/html/media/recipes/

    depends_on:
      # Контейнер nginx должен быть запущен после контейнера web
      - django

volumes:
  # Новые тома 
  static_value:
  media_value:



#### первоначальный

#version: '3.3'
#services:

#  frontend:
#    build:
#      context: ../frontend
#      dockerfile: Dockerfile
#    volumes:
#      - ../frontend/:/app/result_build/
#  nginx:
#    image: nginx:1.19.3
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf
#      - ../frontend/build:/usr/share/nginx/html/
#      - ../docs/:/usr/share/nginx/html/api/docs/
